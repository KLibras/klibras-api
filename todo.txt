PASSO 1: CONFIGURAR O BANCO DE DADOS (AMAZON RDS)

    Acesse o console do RDS na AWS e clique em "Create database".

    Selecione "Standard Create" e "MySQL".

    Escolha o template "Free tier" para começar.

    Defina um "DB instance identifier" (ex: klibras-db), um "Master username" (ex: klibras) e uma senha forte (anote-a).

    Em "Connectivity", na seção "Public access", selecione "No".

    Clique em "Create database" e aguarde o status mudar para "Available".

    Anote o "Endpoint" e a "Port" da aba "Connectivity & security".

PASSO 2: CONFIGURAR O SERVIDOR (AMAZON EC2)

    Acesse o console do EC2 e clique em "Launch instance".

    Dê um nome (ex: klibras-server), selecione a AMI "Ubuntu" e o tipo de instância "t2.micro".

    Crie um novo "Key pair (login)", baixe o arquivo .pem e guarde-o em local seguro.

    Em "Network settings", clique em "Edit". Crie um novo security group com as seguintes regras de entrada (Inbound rules):

        SSH (Porta 22): Source "My IP".

        HTTP (Porta 80): Source "Anywhere-IPv4".

        HTTPS (Porta 443): Source "Anywhere-IPv4".

    Clique em "Launch instance" e anote o "Public IPv4 address" da instância quando estiver "Running".

PASSO 3: CONECTAR RDS E EC2

    Vá para o Security Group do seu RDS (encontrado na aba "Connectivity & security" da instância RDS).

    Selecione o grupo, clique em "Edit inbound rules".

    Adicione uma nova regra:

        Type: MYSQL/Aurora.

        Source: "Custom" e cole o ID do Security Group da sua instância EC2 (ex: sg-xxxxxxxxxxxxxxxxx).

PASSO 4: CONFIGURAR O GOOGLE CLOUD CONSOLE

    Acesse o Google Cloud Console > APIs & Services > Credentials.

    Edite seu "OAuth 2.0 Client ID".

    Em "Authorized redirect URIs", adicione a URI do seu servidor: http://<SEU_IP_PUBLICO_DA_EC2>/auth/google

PASSO 5: PREPARAR O SERVIDOR EC2

    Conecte-se ao seu servidor via SSH (substitua os valores):
    ssh -i /caminho/para/sua-chave.pem ubuntu@<SEU_IP_PUBLICO_DA_EC2>

    Atualize o servidor e instale as dependências:
    sudo apt-get update && sudo apt-get upgrade -y
    sudo apt-get install -y docker.io docker-compose git

    Adicione seu usuário ao grupo do Docker e reinicie a conexão:
    sudo usermod -aG docker ${USER}
    exit
    (Conecte-se novamente com o comando ssh do passo 1)

    Clone seu projeto do GitHub:
    git clone <URL_DO_SEU_REPOSITORIO_GIT>
    cd <NOME_DO_SEU_REPOSITORIO>

PASSO 6: CONFIGURAR E RODAR A APLICAÇÃO

    Crie e edite o arquivo de variáveis de ambiente:
    nano app/.env

    Cole o conteúdo abaixo, substituindo os valores entre <>:
    Configuração do Banco de Dados (RDS)

    DATABASE_URL="mysql+aiomysql://<user_rds>:<senha_rds>@<endpoint_rds>:3306/KLibras"
    MYSQL_DATABASE=KLibras
    MYSQL_USER=<user_rds>
    MYSQL_PASSWORD=<senha_rds>
    Configurações da Aplicação

    SECRET_KEY=<gere_uma_nova_chave_secreta_forte>
    ALLOWED_ORIGINS="http://localhost,http://<SEU_IP_PUBLICO_DA_EC2>"
    ALGORITHM=HS256
    ACCESS_TOKEN_LIFETIME=15
    SHORT_REFRESH_TOKEN_LIFETIME=60
    LONG_REFRESH_TOKEN_LIFETIME=43200
    Google Cloud Console

    GOOGLE_CLIENT_ID=<SEU_CLIENT_ID_DO_GOOGLE>
    RabbitMQ

    RABBITMQ_DEFAULT_USER=guest
    RABBITMQ_DEFAULT_PASS=guest

    Salve e saia do editor (Ctrl+X, depois Y, depois Enter).

    Inicie todos os serviços com Docker Compose:
    docker-compose up --build -d

PASSO 7: VERIFICAÇÃO E GERENCIAMENTO

    Verifique se os contêineres estão rodando:
    docker-compose ps

    Verifique os logs da aplicação para garantir que não há erros:
    docker-compose logs -f api

    Verifique os logs do worker:
    docker-compose logs -f worker

    Para parar a aplicação:
    docker-compose down